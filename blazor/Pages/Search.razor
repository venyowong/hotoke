@page "/{Keyword}"
@using Hotoke.Core.Models
@inject HttpClient httpClient
@using System.Threading

<BSAlert Color="Color.Danger" IsOpen="@ShowWarning" IsDismissible="false">
    @Warning
</BSAlert>

<div class="input-group">
    <span class="input-group-btn">
        <img src="./logo.png" class="logo" height="34">
    </span>
    <input type="text" @bind="Keyword" class="form-control keyword" placeholder="Enter keyword">
    <span class="input-group-btn">
        <a class="btn btn-light" @onclick="Searching">Search</a>
    </span>
</div>

@if (ResultModel != null && ResultModel.Results != null)
{
    @foreach (var result in ResultModel.Results)
    {
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Body">
                <BSCard CardType="CardType.Title">@((MarkupString)$"<h3><a href='{result.Url}' target='_blank'>{result.Title}</a></h3>")</BSCard>
                <BSCard CardType="CardType.Subtitle">@((MarkupString)$"<p><a href='{result.Url}' target='_blank'><font color='#006621'>{result.Url}</font></a></p>")</BSCard>
                <BSCard CardType="CardType.Text">@result.Desc</BSCard>
            </BSCard>
            <BSCard CardType="CardType.Footer">
                @foreach (var source in result.Sources)
                {
                    switch (source)
                    {
                        case "bing":
                            <BSImage IsRounded="true" Class="engine-logo" Alignment="Alignment.Left" src="https://www.bing.com/favicon.ico" alt="bing" />
                            break;
                        case "baidu":
                            <BSImage IsRounded="true" Class="engine-logo" Alignment="Alignment.Left" src="https://www.baidu.com/favicon.ico" alt="baidu" />
                            break;
                        case "360":
                            <BSImage IsRounded="true" Class="engine-logo" Alignment="Alignment.Left" src="https://www.so.com/favicon.ico" alt="360" />
                            break;
                        case "lookao":
                            <BSImage IsRounded="true" Class="engine-logo" Alignment="Alignment.Left" src="https://static.lookao.com/img/logo_header_2x.dfb628.png" alt="lookao" />
                            break;
                        case "sogou":
                            <BSImage IsRounded="true" Class="engine-logo" Alignment="Alignment.Left" src="https://dlweb.sogoucdn.com/wapsearch/static/img/load_logo.43e5d484.png" alt="sogou" />
                            break;
                    }
                }
            </BSCard>
        </BSCard>
    }
}

<span><font color="#808080">No more ~ヽ(ー_ー)ノ</font></span>

@code {
    protected override async Task OnInitializedAsync()
    {
        await this.Searching();
    }

    private async Task CompleteSearch()
    {
        if (this.ResultModel != null && !this.ResultModel.Finished && 
            !string.IsNullOrWhiteSpace(this.ResultModel.RequestId))
        {
            this.ResultModel = await this.httpClient.GetJsonAsync<SearchResultModel>($"https://venyo.cn/search?requestId={this.ResultModel.RequestId}");
            this.StateHasChanged();
            Thread.Sleep(300);
            await this.CompleteSearch();
        }
    }

    public async Task Searching()
    {
        this.ResultModel = await this.httpClient.GetJsonAsync<SearchResultModel>($"https://venyo.cn/search?keyword={Keyword}");
        if (this.ResultModel == null)
        {
            this.Warning = "cannot get any results";
            return;
        }

        await this.CompleteSearch();
    }

    [Parameter]
    public string Keyword{get;set;}

    public string Warning{get;set;}

    public SearchResultModel ResultModel{get;set;}

    public bool ShowWarning => !string.IsNullOrWhiteSpace(this.Warning);
}